import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { ThemeProvider } from "@/components/providers/theme_provider";
import ProvideSession from "@/components/providers/session_provider";
import { auth } from "@/lib/auth";
import "./globals.css";
import TokenRefreshProvider from "@/components/providers/token_refresh_provider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await auth();
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/* potentially change this (read up on RSC paradigm and converting entire app into client compoennts by wrapping providers) */}
        <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
        >
          <ProvideSession session={session}>
            {children}
          </ProvideSession>
        </ThemeProvider>
      </body>
    </html>
  );
}
